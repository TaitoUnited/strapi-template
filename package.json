{
  "name": "strapi-template",
  "scripts": {
    "install-clean": "echo '# Nothing to cleanup'",
    "install-ci": "echo '# Nothing to install'",
    "install-dev": "echo '# Installing all libraries on host for code editor support. TODO how to minimize as --only=dev affects devDepencies also?' && npm-run-all install-all",
    "install-all": "npm-run-all install-all:server",
    "install-all:server": "cd server && npm install",
    "taito-init": "taito -z ${taito_options} init:${taito_env} && npm-run-all import-db-data",
    "taito-init:clean": "taito -z ${taito_options} init:${taito_env} --clean && npm-run-all import-db-data clean:storage",
    "import-db-data": "if [ -f ./database/data/${taito_env}.sql ]; then taito ${taito_options} db import:${taito_env} ./database/data/${taito_env}.sql; fi",
    "clean:storage": "if [ ${taito_env} = 'local' ] && [ -d storage ]; then echo Cleaning storage; rm -rf ./storage/bucket/*; rm -rf ./storage/.minio.sys/buckets/bucket/*/; fi",
    "db-deploy": "npm-run-all generate-db-classes",
    "generate-db-classes": "if [ ${taito_env} = 'local' ] && [ -f ./server/generate ]; then taito ${taito_options} exec:server ./generate; fi",
    "info:local": "yes | taito ${taito_options} secret show:${taito_env}",
    "info": "yes | taito ${taito_options} secret show:${taito_env} basic-auth",
    "lint": "echo Running lint locally && npm-run-all --parallel lint:server",
    "lint:server": "cd server && npm-run-all lint",
    "unit": "echo Running unit tests locally && npm-run-all --parallel unit:server",
    "unit:server": "cd server && npm-run-all unit",
    "test": "npm-run-all test:server",
    "test:server": "taito ${taito_options} util test:server:${taito_env}",
    "code-check": "docker run --interactive --tty --rm --env CODECLIMATE_CODE=\"$PWD\" --volume \"$PWD\":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate engines:install && docker run --interactive --tty --rm --env CODECLIMATE_CODE=\"$PWD\" --volume \"$PWD\":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze",
    "taito-host-code-check": "npm-run-all code-check",
    "_dep-check_comment": "TODO how to pass -u argument from dep-check to dep-check:TARGET?",
    "dep-check": "npm run \"dep-check:root {@}\" \"dep-check:server {@}\" -- ",
    "dep-check:root": "npm run _dep-check-script -- . ",
    "dep-check:server": "npm run _dep-check-script -- server ",
    "_dep-check-script": "sh -c 'echo --- ${0} --- && cd ${0} && (npm-check ${@} || :) && echo && echo \"NOTE: Many of the devDependencies and ~ references are actually in use even if reported unused. But all unused dependencies can usually be removed from package.json.\" && echo' ",
    "project-show": "cat PROJECT.md | sed -n -e '/^## Contacts.*$/,/^#.*$/{ /^## Contacts.*$/d; /^#.*$/d; p; }'",
    "precommit:branch": "if git-branch-is -q test || git-branch-is -q uat || git-branch-is -q qa || git-branch-is -q stag || git-branch-is -q canary || git-branch-is -q cana || git-branch-is -q prod || git-branch-is -q master; then echo 'ERROR: You cannot commit changes directly to this environment branch. Only fast-forward merge is allowed.' && echo && exit 1; fi",
    "precommit:lint": "echo 'SKIP: Skipping linting on commit since we are already continuously linting during development.'",
    "release-pre:prod": "semantic-release --dry-run",
    "release-post:prod": "semantic-release --no-ci"
  },
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
      "pre-commit": "if [ \"$taito_mode\" != 'ci' ]; then npm-run-all precommit:branch precommit:lint; fi",
      "pre-push": "if [ \"$taito_mode\" != 'ci' ]; then npm-run-all --parallel lint unit; fi"
    }
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ],
    "rules": {
      "type-enum": [
        2,
        "always",
        [
          "wip",
          "feat",
          "fix",
          "docs",
          "style",
          "refactor",
          "perf",
          "test",
          "revert",
          "build",
          "ci",
          "chore"
        ]
      ]
    }
  },
  "release": {
    "npmPublish": false,
    "analyzeCommits": {
      "preset": "angular",
      "releaseRules": [
        {
          "type": "feat",
          "release": "minor"
        },
        {
          "type": "fix",
          "release": "patch"
        },
        {
          "type": "docs",
          "release": "patch"
        },
        {
          "type": "style",
          "release": "patch"
        },
        {
          "type": "refactor",
          "release": "patch"
        },
        {
          "type": "perf",
          "release": "patch"
        },
        {
          "type": "test",
          "release": "patch"
        },
        {
          "type": "revert",
          "release": "patch"
        },
        {
          "type": "build",
          "release": "patch"
        },
        {
          "type": "ci",
          "release": "patch"
        },
        {
          "type": "chore",
          "release": "patch"
        }
      ]
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TaitoUnited/strapi-template.git"
  },
  "devDependencies": {
    "@commitlint/cli": "~16.1.0",
    "@commitlint/config-conventional": "~16.0.0",
    "git-branch-is": "~4.0.0",
    "husky": "~7.0.4",
    "npm-run-all": "~4.1.5",
    "semantic-release": "~19.0.2"
  }
}
